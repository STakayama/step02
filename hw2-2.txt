木構造を使えばO(log N)、ハッシュテーブルを使えばO(1)で検索・追加・削除を実現することができて、これだけ見ればハッシュテーブルのほうがはるかに優れているように見える。ところが、現実の大規模なデータベースでは、（もちろんいろいろなものがあるが）ハッシュテーブルではなく木構造が使われることが多い。その理由を考えよ。


(ハッシュテーブル)
利点：(ハッシュ関数に偏りがなく、配列が十分なサイズなら)
O(1)で挿入削除検索が可能
欠点：ハッシュ関数に工夫が必要になる(偏らないよう)
配列は余裕をもって用意しないとならない

(木構造)
利点：メモリを多めに確保する必要なし。
欠点：木の高さをバランスを保つようにしないと検索がO(n)になりうる。

以下、考えられる理由...
＊ハッシュだと作成時点で格納できるデータの量に上限ができてしまう。
超えた時は、新たに計算し直さないといけない。
かといってあらかじめ余分に取っておくのもメモリが無駄になるから嫌。
そのため、データを足しやすい木構造の方が使われるのでは。

＊データの配置される位置に意味をもたせたい時にハッシュテーブルは不適である。
(IDの値が近いデータはそばに格納したい、など)
また、範囲検索(否定条件での検索とか)も不向きである。
木だったらある程度決まりに従って格納できるはず。

＊沢山のデータをまかなえ、かつ衝突しないハッシュ関数を考えるのが大変。
